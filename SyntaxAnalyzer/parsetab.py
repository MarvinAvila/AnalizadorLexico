
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASIGNACION IDENTIFICADOR LITERAL_BOOLEANO LITERAL_CADENA LITERAL_DECIMAL LITERAL_ENTERO PUNTO_COMA TIPOexpresion : LITERAL_ENTERO\n| LITERAL_DECIMAL\n| LITERAL_CADENA\n| LITERAL_BOOLEANO\n| IDENTIFICADORdeclaracion : TIPO IDENTIFICADOR PUNTO_COMA\n| TIPO IDENTIFICADOR ASIGNACION expresion PUNTO_COMAconstante : TIPO IDENTIFICADOR ASIGNACION expresionasignacion : IDENTIFICADOR ASIGNACION expresionprograma : declaracionesdeclaraciones : declaraciones declaracion\n| declaraciones constante\n| declaraciones asignacion\n| declaracion\n| constante\n| asignacion\n| declaraciones PUNTO_COMA'
    
_lr_action_items = {'LITERAL_ENTERO':([0,],[2,]),'LITERAL_DECIMAL':([0,],[3,]),'LITERAL_CADENA':([0,],[4,]),'LITERAL_BOOLEANO':([0,],[5,]),'IDENTIFICADOR':([0,],[6,]),'$end':([1,2,3,4,5,6,],[0,-1,-2,-3,-4,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresion':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresion","S'",1,None,None,None),
  ('expresion -> LITERAL_ENTERO','expresion',1,'p_expresion','Parser.py',10),
  ('expresion -> LITERAL_DECIMAL','expresion',1,'p_expresion','Parser.py',11),
  ('expresion -> LITERAL_CADENA','expresion',1,'p_expresion','Parser.py',12),
  ('expresion -> LITERAL_BOOLEANO','expresion',1,'p_expresion','Parser.py',13),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion','Parser.py',14),
  ('declaracion -> TIPO IDENTIFICADOR PUNTO_COMA','declaracion',3,'p_declaracion','Parser.py',30),
  ('declaracion -> TIPO IDENTIFICADOR ASIGNACION expresion PUNTO_COMA','declaracion',5,'p_declaracion','Parser.py',31),
  ('constante -> TIPO IDENTIFICADOR ASIGNACION expresion','constante',4,'p_constante','Parser.py',52),
  ('asignacion -> IDENTIFICADOR ASIGNACION expresion','asignacion',3,'p_asignacion','Parser.py',72),
  ('programa -> declaraciones','programa',1,'p_programa','Parser.py',117),
  ('declaraciones -> declaraciones declaracion','declaraciones',2,'p_declaraciones','Parser.py',121),
  ('declaraciones -> declaraciones constante','declaraciones',2,'p_declaraciones','Parser.py',122),
  ('declaraciones -> declaraciones asignacion','declaraciones',2,'p_declaraciones','Parser.py',123),
  ('declaraciones -> declaracion','declaraciones',1,'p_declaraciones','Parser.py',124),
  ('declaraciones -> constante','declaraciones',1,'p_declaraciones','Parser.py',125),
  ('declaraciones -> asignacion','declaraciones',1,'p_declaraciones','Parser.py',126),
  ('declaraciones -> declaraciones PUNTO_COMA','declaraciones',2,'p_declaraciones','Parser.py',127),
]
